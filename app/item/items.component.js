"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_background_http_1 = require("nativescript-background-http");
var Picker = require("nativescript-imagepicker");
var camera = require("nativescript-camera");
var lodash_1 = require("lodash");
var Subject_1 = require("rxjs/Subject");
var platform_1 = require("tns-core-modules/platform");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.UploadSession = nativescript_background_http_1.session('image-upload');
    }
    ItemsComponent.prototype.ngOnInit = function () {
        this.request = {
            url: "http://httpbin.org/post",
            method: "POST",
            headers: {
                "Content-Type": "application/octet-stream",
                "File-Name": this.imageName
            },
            description: "{ 'uploading': " + this.imageName + " }"
        };
    };
    ItemsComponent.prototype.cameraOpen = function () {
        var _this = this;
        if (!camera.isAvailable()) {
            alert('You didn\'t allow the app to use camera');
            return;
        }
        camera.takePicture({
            saveToGallery: true,
            cameraFacing: 'front'
        })
            .then(function (imageAsset) {
            var image;
            if (platform_1.isAndroid) {
                image = {
                    fileUri: imageAsset.android
                };
            }
            else {
                image = imageAsset.ios;
            }
            return image;
        })
            .then(function (image) {
            return _this.uploadImagePicker(image);
        })
            .catch(function (err) {
            console.log("Error -> " + err.message);
        });
    };
    ItemsComponent.prototype.pickerOpen = function () {
        var context = Picker.create({
            mode: "single",
            mdeiaType: 'image'
        });
        this.startSelection(context);
    };
    ItemsComponent.prototype.startSelection = function (context) {
        var _this = this;
        context
            .authorize()
            .then(function () {
            return context.present();
        })
            .then(function (selection) {
            _this.uploadImagePicker(lodash_1.first(selection));
        })
            .catch(function (e) {
            console.error(e);
        });
    };
    ItemsComponent.prototype.uploadImagePicker = function (image) {
        this.uploadMultipartImagePicker(image)
            .subscribe({
            next: function (e) {
                console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
            },
            error: function (e) {
                console.log(JSON.stringify(e));
            },
            complete: function () {
                console.log("complete");
            }
        });
    };
    ItemsComponent.prototype.uploadMultipartImagePicker = function (image) {
        var fileUri = image.fileUri;
        var request = {
            url: "http://httpbin.org/post",
            method: 'POST',
            headers: {
                "Content-Type": "application/octet-stream",
                "File-Name": fileUri,
                'Authorization': "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1laWQiOiI4MzlmMDg4NC1jMmI3LTQ1ZGUtOTc1Yy0wOTYwMTY4MWE2M2EiLCJ1bmlxdWVfbmFtZSI6IjgzOWYwODg0LWMyYjctNDVkZS05NzVjLTA5NjAxNjgxYTYzYSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vYWNjZXNzY29udHJvbHNlcnZpY2UvMjAxMC8wNy9jbGFpbXMvaWRlbnRpdHlwcm92aWRlciI6IkFTUC5ORVQgSWRlbnRpdHkiLCJBc3BOZXQuSWRlbnRpdHkuU2VjdXJpdHlTdGFtcCI6ImFiNGNmOWE2LWVmYzEtNDZhNi05N2YyLWNlNzc5NjkxZGMxMCIsIlVzZXJJZCI6IjgzOWYwODg0LWMyYjctNDVkZS05NzVjLTA5NjAxNjgxYTYzYSIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3QiLCJhdWQiOiI0MTRlMTkyN2EzODg0ZjY4YWJjNzlmNzI4MzgzN2ZkMSIsImV4cCI6MTU2MzgxMDQ4NiwibmJmIjoxNTExOTcwNDg2fQ.KUdYperMo_79QhR3sU3odmt7LzuCjdSMa25-AU9QLwA",
                "UserId": "2a2736cb-e5e6-4515-8ad7-02ea0cfef08b"
            },
            description: "Uploading " + fileUri
        };
        var params = [{ name: "nameOfFile", filename: fileUri, mimeType: 'image/JPG' }];
        console.log(JSON.stringify(params));
        var subject = new Subject_1.Subject();
        var task = this.UploadSession.multipartUpload(params, request);
        task.on('progress', function (e) { return subject.next(e); });
        task.on('error', function (e) { return subject.error(e); });
        task.on('complete', function (e) { return subject.complete(); });
        return subject;
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBRWxELDZFQUFnRTtBQUNoRSxpREFBbUQ7QUFDbkQsNENBQThDO0FBQzlDLGlDQUErQjtBQUMvQix3Q0FBcUM7QUFDckMsc0RBQW9EO0FBTXBEO0lBS0k7UUFHSSxJQUFJLENBQUMsYUFBYSxHQUFHLHNDQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGlDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ1gsR0FBRyxFQUFFLHlCQUF5QjtZQUM5QixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRTtnQkFDTCxjQUFjLEVBQUUsMEJBQTBCO2dCQUMxQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVM7YUFDOUI7WUFDRCxXQUFXLEVBQUUsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJO1NBQ3pELENBQUM7SUFDTixDQUFDO0lBRUQsbUNBQVUsR0FBVjtRQUFBLGlCQTRCQztRQTNCRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEIsS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDO1FBQ1gsQ0FBQztRQUNELE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDZixhQUFhLEVBQUUsSUFBSTtZQUNuQixZQUFZLEVBQUUsT0FBTztTQUN4QixDQUFDO2FBQ0csSUFBSSxDQUFDLFVBQUMsVUFBVTtZQUNiLElBQUksS0FBUyxDQUFDO1lBQ2QsRUFBRSxDQUFBLENBQUMsb0JBQVMsQ0FBQyxDQUFBLENBQUM7Z0JBQ1YsS0FBSyxHQUFRO29CQUNULE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTztpQkFDOUIsQ0FBQztZQUNOLENBQUM7WUFDRCxJQUFJ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QUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBQyxDQUFNLElBQUssT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFmLENBQWUsQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsQ0FBQyxJQUFLLE9BQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBaEIsQ0FBZ0IsQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQUMsQ0FBQyxJQUFLLE9BQUEsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFsQixDQUFrQixDQUFDLENBQUM7UUFFL0MsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBdkhRLGNBQWM7UUFMMUIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUsd0JBQXdCO1NBQ3hDLENBQUM7O09BQ1csY0FBYyxDQXlIMUI7SUFBRCxxQkFBQztDQUFBLEFBekhELElBeUhDO0FBekhZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBzZXNzaW9uLCBTZXNzaW9uIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1iYWNrZ3JvdW5kLWh0dHBcIjtcbmltcG9ydCAqIGFzIFBpY2tlciBmcm9tIFwibmF0aXZlc2NyaXB0LWltYWdlcGlja2VyXCI7XG5pbXBvcnQgKiBhcyBjYW1lcmEgZnJvbSBcIm5hdGl2ZXNjcmlwdC1jYW1lcmFcIjtcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSBcInJ4anMvU3ViamVjdFwiO1xuaW1wb3J0IHtpc0FuZHJvaWR9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3BsYXRmb3JtXCI7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJucy1pdGVtc1wiLFxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9pdGVtcy5jb21wb25lbnQuaHRtbFwiLFxufSlcbmV4cG9ydCBjbGFzcyBJdGVtc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSByZXF1ZXN0IDogYW55O1xuXG4gICAgcHJpdmF0ZSBpbWFnZU5hbWUgOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBVcGxvYWRTZXNzaW9uOiBTZXNzaW9uO1xuICAgIGNvbnN0cnVjdG9yKFxuXG4gICAgKSB7XG4gICAgICAgIHRoaXMuVXBsb2FkU2Vzc2lvbiA9IHNlc3Npb24oJ2ltYWdlLXVwbG9hZCcpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSB7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cDovL2h0dHBiaW4ub3JnL3Bvc3RcIixcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgICAgICAgICAgICAgICBcIkZpbGUtTmFtZVwiOiB0aGlzLmltYWdlTmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInsgJ3VwbG9hZGluZyc6IFwiICsgdGhpcy5pbWFnZU5hbWUgKyBcIiB9XCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjYW1lcmFPcGVuKCl7XG4gICAgICAgIGlmICghY2FtZXJhLmlzQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgICAgIGFsZXJ0KCdZb3UgZGlkblxcJ3QgYWxsb3cgdGhlIGFwcCB0byB1c2UgY2FtZXJhJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FtZXJhLnRha2VQaWN0dXJlKHtcbiAgICAgICAgICAgIHNhdmVUb0dhbGxlcnk6IHRydWUsXG4gICAgICAgICAgICBjYW1lcmFGYWNpbmc6ICdmcm9udCdcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChpbWFnZUFzc2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGltYWdlOmFueTtcbiAgICAgICAgICAgICAgICBpZihpc0FuZHJvaWQpe1xuICAgICAgICAgICAgICAgICAgICBpbWFnZSA9IDxhbnk+e1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVVyaTogaW1hZ2VBc3NldC5hbmRyb2lkXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWFnZSA9IGltYWdlQXNzZXQuaW9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2U7XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoaW1hZ2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRJbWFnZVBpY2tlcig8YW55PiBpbWFnZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIC0+IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGlja2VyT3Blbigpe1xuICAgICAgICBsZXQgY29udGV4dCA9IFBpY2tlci5jcmVhdGUoPGFueT57XG4gICAgICAgICAgICBtb2RlOiBcInNpbmdsZVwiLFxuICAgICAgICAgICAgbWRlaWFUeXBlOiAnaW1hZ2UnXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0YXJ0U2VsZWN0aW9uKGNvbnRleHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhcnRTZWxlY3Rpb24oY29udGV4dDogUGlja2VyLkltYWdlUGlja2VyKSB7XG4gICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgIC5hdXRob3JpemUoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnByZXNlbnQoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoc2VsZWN0aW9uOiBBcnJheTxQaWNrZXIuU2VsZWN0ZWRBc3NldD4pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZEltYWdlUGlja2VyKGZpcnN0KHNlbGVjdGlvbikpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgdXBsb2FkSW1hZ2VQaWNrZXIoaW1hZ2U6IFBpY2tlci5TZWxlY3RlZEFzc2V0KSB7XG5cbiAgICAgICAgdGhpcy51cGxvYWRNdWx0aXBhcnRJbWFnZVBpY2tlcihpbWFnZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVcGxvYWQ6ICR7KGUuY3VycmVudEJ5dGVzIC8gZS50b3RhbEJ5dGVzKSAqIDEwMH1gKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwbG9hZE11bHRpcGFydEltYWdlUGlja2VyKGltYWdlOiBQaWNrZXIuU2VsZWN0ZWRBc3NldCk6IFN1YmplY3Q8YW55PiB7XG5cbiAgICAgICAgbGV0ICBmaWxlVXJpID0gaW1hZ2UuZmlsZVVyaTtcblxuICAgICAgICBsZXQgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgIHVybDogXCJodHRwOi8vaHR0cGJpbi5vcmcvcG9zdFwiLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgICAgICAgICAgICAgICBcIkZpbGUtTmFtZVwiOiBmaWxlVXJpLFxuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogXCJCZWFyZXIgZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKSVV6STFOaUo5LmV5SnVZVzFsYVdRaU9pSTRNemxtTURnNE5DMWpNbUkzTFRRMVpHVXRPVGMxWXkwd09UWXdNVFk0TVdFMk0yRWlMQ0oxYm1seGRXVmZibUZ0WlNJNklqZ3pPV1l3T0RnMExXTXlZamN0TkRWa1pTMDVOelZqTFRBNU5qQXhOamd4WVRZellTSXNJbWgwZEhBNkx5OXpZMmhsYldGekxtMXBZM0p2YzI5bWRDNWpiMjB2WVdOalpYTnpZMjl1ZEhKdmJITmxjblpwWTJVdk1qQXhNQzh3Tnk5amJHRnBiWE12YVdSbGJuUnBkSGx3Y205MmFXUmxjaUk2SWtGVFVDNU9SVlFnU1dSbGJuUnBkSGtpTENKQmMzQk9aWFF1U1dSbGJuUnBkSGt1VTJWamRYSnBkSGxUZEdGdGNDSTZJbUZpTkdObU9XRTJMV1ZtWXpFdE5EWmhOaTA1TjJZeUxXTmxOemM1TmpreFpHTXhNQ0lzSWxWelpYSkpaQ0k2SWpnek9XWXdPRGcwTFdNeVlqY3RORFZrWlMwNU56VmpMVEE1TmpBeE5qZ3hZVFl6WVNJc0ltbHpjeUk2SW1oMGRIQTZMeTlzYjJOaGJHaHZjM1FpTENKaGRXUWlPaUkwTVRSbE1Ua3lOMkV6T0RnMFpqWTRZV0pqTnpsbU56STRNemd6TjJaa01TSXNJbVY0Y0NJNk1UVTJNemd4TURRNE5pd2libUptSWpveE5URXhPVGN3TkRnMmZRLktVZFlwZXJNb183OVFoUjNzVTNvZG10N0x6dUNqZFNNYTI1LUFVOVFMd0FcIixcbiAgICAgICAgICAgICAgICBcIlVzZXJJZFwiOiBcIjJhMjczNmNiLWU1ZTYtNDUxNS04YWQ3LTAyZWEwY2ZlZjA4YlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBVcGxvYWRpbmcgJHtmaWxlVXJpfWBcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgcGFyYW1zID0gW3sgbmFtZTogXCJuYW1lT2ZGaWxlXCIsIGZpbGVuYW1lOiBmaWxlVXJpLCBtaW1lVHlwZTogJ2ltYWdlL0pQRycgfV07XG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuXG4gICAgICAgIGxldCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgICAgICBsZXQgdGFzayA9IHRoaXMuVXBsb2FkU2Vzc2lvbi5tdWx0aXBhcnRVcGxvYWQocGFyYW1zLCByZXF1ZXN0KTtcbiAgICAgICAgdGFzay5vbigncHJvZ3Jlc3MnLCAoZTogYW55KSA9PiBzdWJqZWN0Lm5leHQoZSkpO1xuXG4gICAgICAgIHRhc2sub24oJ2Vycm9yJywgKGUpID0+IHN1YmplY3QuZXJyb3IoZSkpO1xuXG4gICAgICAgIHRhc2sub24oJ2NvbXBsZXRlJywgKGUpID0+IHN1YmplY3QuY29tcGxldGUoKSk7XG5cbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfVxuXG59Il19